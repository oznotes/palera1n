name: Build palera1n for Linux x86

on:
  push:
    paths:
      - 'src/**'
      - 'include/**'
      - 'Makefile'
      - '.github/workflows/build-linux-x86.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'include/**'
      - 'Makefile'
      - '.github/workflows/build-linux-x86.yml'
  workflow_dispatch:

jobs:
  build-Linux:
    runs-on: ubuntu-latest
    env:
      MBEDTLS_VERSION: 3.5.2
      LIBUSB_VERSION: 1.0.27
      READLINE_VERSION: 8.2
      GPM_VERSION: 1.20.7
      LIBIMOBILEDEVICE_COMMIT: ed0d66d0341562731bb19928dfe48155509fa7a7
      LIBIRECOVERY_COMMIT: 7ce02c347b7c26e59498e6af31c9da51018d0fa1
      LIBIMOBILEDEVICE_GLUE_COMMIT: 362f7848ac89b74d9dd113b38b51ecb601f76094
      USBMUXD_COMMIT: bc0b91ca856811f4393318dc83db6dc3c1ac326d
      LIBPLIST_COMMIT: 2117b8fdb6b4096455bd2041a63e59a028120136
      LIBUSBMUXD_COMMIT: a7f0543fb1ecb20ac7121c0fd77297200e0e43fc

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get remove -y libssl-dev libreadline-dev
          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc cmake
          sudo pip3 install jsonschema jinja2

      - name: Download toolchain
        run: |
          curl -LO https://musl.cc/i486-linux-musl-cross.tgz
          tar -xf i486-linux-musl-cross.tgz

      - name: Setup environment
        run: |
          echo "$(pwd)/i486-linux-musl-cross/bin" >> $GITHUB_PATH
          echo "PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          echo "CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib -D_FILE_OFFSET_BITS=64 -D_TIME_BITS=64" >> $GITHUB_ENV
          echo "CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib -D_FILE_OFFSET_BITS=64 -D_TIME_BITS=64" >> $GITHUB_ENV
          echo "LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib" >> $GITHUB_ENV
          echo "DESTDIR=$(pwd)/sysroot" >> $GITHUB_ENV
          echo "PREFIX=/usr/local" >> $GITHUB_ENV
          echo "CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=i486-linux-musl --prefix=/usr/local --disable-shared --enable-static" >> $GITHUB_ENV
          echo "CROSS_COMPILE=i486-linux-musl-" >> $GITHUB_ENV

      - name: Download dependencies
        run: |
          curl -LO https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz
          curl -LO https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2
          curl -LO https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz
          curl -LO https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz
          curl -LO https://curl.se/download/curl-7.86.0.tar.gz
          curl -LO https://www.openssl.org/source/openssl-1.1.1k.tar.gz
          curl -LO https://invisible-mirror.net/archives/ncurses/ncurses-6.2.tar.gz
          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz
          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2
          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz
          tar -xf ${{ env.GPM_VERSION }}.tar.gz
          tar -xzf curl-7.86.0.tar.gz
          tar -xzf openssl-1.1.1k.tar.gz
          tar -xzf ncurses-6.2.tar.gz
          git clone --depth=1 https://github.com/libimobiledevice/libplist
          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue
          git clone --depth=1 https://github.com/libimobiledevice/libirecovery
          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd
          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice
          git clone --depth=1 https://github.com/libimobiledevice/usbmuxd
          git clone --depth=1 https://github.com/libimobiledevice/libtatsu

      - name: Create CMake toolchain file
        run: |
          cat << EOF > i486-linux-musl-toolchain.cmake
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR i486)

          set(CMAKE_C_COMPILER i486-linux-musl-gcc)
          set(CMAKE_CXX_COMPILER i486-linux-musl-g++)

          set(CMAKE_FIND_ROOT_PATH ${{ env.DESTDIR }}${{ env.PREFIX }})
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

          set(CMAKE_C_FLAGS "${CFLAGS}")
          set(CMAKE_CXX_FLAGS "${CXXFLAGS}")
          EOF

      - name: Build ncurses
        run: |
          cd ncurses-6.2
          ./configure ${{ env.CONFIGURE_ARGS }} --without-debug --without-ada --without-manpages --without-progs --without-tests --with-terminfo-dirs=/etc/terminfo:/lib/terminfo:/usr/share/terminfo --enable-termcap
          make -j$(nproc)
          make install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build Mbed TLS
        run: |
          cd mbedtls-${{ env.MBEDTLS_VERSION }}
          sed -i 's/#define MBEDTLS_AESNI_C/\/\/ #define MBEDTLS_AESNI_C/' include/mbedtls/mbedtls_config.h
          mkdir build && cd build
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=../../i486-linux-musl-toolchain.cmake \
            -DCMAKE_INSTALL_PREFIX=${{ env.PREFIX }} \
            -DENABLE_PROGRAMS=OFF \
            -DENABLE_TESTING=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DMBEDTLS_HAVE_SSE2=OFF \
            -DMBEDTLS_HAVE_X86_64=OFF \
            -DCMAKE_C_FLAGS="${CFLAGS} -march=i486 -mtune=i486"
          make -j$(nproc)
          make install DESTDIR=${{ env.DESTDIR }}
          cd ../..

      - name: Build libusb
        run: |
          cd libusb-${{ env.LIBUSB_VERSION }}
          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev
          make -j$(nproc)
          make install DESTDIR=${{ env.DESTDIR }}
          # Ensure pkg-config file is in the correct location
          mkdir -p ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/pkgconfig
          cp libusb-1.0.pc ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/pkgconfig/
          cd ..

      - name: Verify libusb installation
        run: |
          echo "libusb headers:"
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/include/libusb-1.0
          echo "libusb libraries:"
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libusb*
          echo "libusb pkg-config file:"
          cat ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/pkgconfig/libusb-1.0.pc

      - name: Build readline
        run: |
          cd readline-${{ env.READLINE_VERSION }}
          export CFLAGS="$CFLAGS -I${{ env.DESTDIR }}${{ env.PREFIX }}/include/ncurses"
          export LDFLAGS="$LDFLAGS -L${{ env.DESTDIR }}${{ env.PREFIX }}/lib"
          ./configure ${{ env.CONFIGURE_ARGS }} --with-curses
          make -j$(nproc) SHLIB_LIBS="-lncurses"
          make install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Debug ncurses and readline
        run: |
          echo "ncurses libraries:"
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libncurses*
          echo "readline libraries:"
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libreadline*
          echo "ncurses headers:"
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/include/ncurses*
          echo "readline headers:"
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/include/readline*
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
          pkg-config --libs ncurses
          pkg-config --libs readline

      - name: Build libplist
        run: |
          cd libplist
          ./autogen.sh
          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython --enable-static --disable-shared
          make -j$(nproc)
          make install DESTDIR=${{ env.DESTDIR }}
          mkdir -p ${{ env.DESTDIR }}/usr/local/lib
          # Copy the .la files from the correct locations
          cp src/.libs/libplist-2.0.la ${{ env.DESTDIR }}/usr/local/lib/
          cp src/.libs/libplist++-2.0.la ${{ env.DESTDIR }}/usr/local/lib/
          cd ..

      - name: Build libimobiledevice-glue
        run: |
          cd libimobiledevice-glue
          ./autogen.sh
          ./configure ${{ env.CONFIGURE_ARGS }} --enable-static --disable-shared
          make -j$(nproc)
          make install DESTDIR=${{ env.DESTDIR }}
          mkdir -p ${{ env.DESTDIR }}/usr/local/lib
          # Copy the .la file from the correct location
          cp src/.libs/libimobiledevice-glue-1.0.la ${{ env.DESTDIR }}/usr/local/lib/
          cd ..

      - name: Build libusbmuxd
        run: |
          cd libusbmuxd
          ./autogen.sh
          ./configure ${{ env.CONFIGURE_ARGS }} --enable-static --disable-shared
          make -j$(nproc)
          make install DESTDIR=${{ env.DESTDIR }}
          mkdir -p ${{ env.DESTDIR }}/usr/local/lib
          # Copy the .la file from the correct location
          cp src/.libs/libusbmuxd-2.0.la ${{ env.DESTDIR }}/usr/local/lib/
          cd ..


      - name: Build libcurl
        run: |
          cd curl-7.86.0
          ./configure ${{ env.CONFIGURE_ARGS }} --disable-shared --enable-static --disable-ldap --without-ssl
          make -j$(nproc)
          make install DESTDIR=${{ env.DESTDIR }}
          # Create a symlink in /usr/local/lib
          sudo mkdir -p /usr/local/lib
          sudo ln -sf ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libcurl.la /usr/local/lib/libcurl.la
          cd ..

      - name: Check libcurl.la contents
        run: |
          echo "Contents of libcurl.la:"
          cat ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libcurl.la

      - name: Build libtatsu
        run: |
          cd libtatsu
          export PKG_CONFIG_PATH=${{ env.DESTDIR }}${{ env.PREFIX }}/lib/pkgconfig:$PKG_CONFIG_PATH
          export CURL_CFLAGS="-I${{ env.DESTDIR }}${{ env.PREFIX }}/include"
          export CURL_LIBS="-L${{ env.DESTDIR }}${{ env.PREFIX }}/lib -lcurl"
          ./autogen.sh
          ./configure ${{ env.CONFIGURE_ARGS }} --enable-static --disable-shared
          make -j$(nproc)
          make install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Build OpenSSL
        run: |
          cd openssl-1.1.1k
          ./Configure linux-generic32 no-shared --prefix=${{ env.PREFIX }} --openssldir=${{ env.PREFIX }}/openssl
          make -j$(nproc)
          make install_sw DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Debug OpenSSL
        run: |
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libssl*
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libcrypto*
          nm ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libssl.a | grep -i bio_free
          nm ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libcrypto.a | grep -i x509_new

      - name: Create symlinks in /usr/local/lib
        run: |
          sudo mkdir -p /usr/local/lib
          for lib in ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/*.a; do
            sudo ln -sf $lib /usr/local/lib/$(basename $lib)
          done

      - name: Set up library symlinks
        run: |
          sudo mkdir -p /usr/local/lib
          for lib in libcurl libplist-2.0 libusbmuxd-2.0 libimobiledevice-glue-1.0; do
            sudo ln -sf ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/${lib}.la /usr/local/lib/${lib}.la
            echo "Created symlink for ${lib}.la"
          done
          ls -l /usr/local/lib/*.la

      - name: Verify library locations
        run: |
          echo "Contents of ${{ env.DESTDIR }}${{ env.PREFIX }}/lib:"
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/*.a
          echo "Contents of /usr/local/lib:"
          ls -l /usr/local/lib/*.a || echo "No .a files in /usr/local/lib"
          echo "LIBRARY_PATH:"
          echo $LIBRARY_PATH
          echo "LD_LIBRARY_PATH:"
          echo $LD_LIBRARY_PATH

      - name: Build libimobiledevice
        run: |
          cd libimobiledevice
          export PKG_CONFIG_PATH=${{ env.DESTDIR }}${{ env.PREFIX }}/lib/pkgconfig:$PKG_CONFIG_PATH
          export CFLAGS="$CFLAGS -I${{ env.DESTDIR }}${{ env.PREFIX }}/include"
          export LDFLAGS="$LDFLAGS -L${{ env.DESTDIR }}${{ env.PREFIX }}/lib"
          export LIBS="-lssl -lcrypto"
          ./autogen.sh
          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython --enable-static --disable-shared
          make -j$(nproc)
          make install DESTDIR=${{ env.DESTDIR }}
          cd ..

      - name: Check libimobiledevice linking
        run: |
          cd libimobiledevice
          make V=1 2>&1 | tee build_output.log
          grep -i "undefined reference" build_output.log || echo "No undefined references found"
          grep -i "cannot find" build_output.log || echo "No missing libraries found"
          cd ..

      - name: Verify Makefile
        run: |
          cd libimobiledevice
          if [ -f Makefile ]; then
            echo "Library paths in Makefile:"
            grep -E "(-L|/lib)" Makefile
          else
            echo "Makefile not found. Contents of the directory:"
            ls -la
          fi
          cd ..

      - name: Check configure output
        run: |
          cd libimobiledevice
          if [ -f config.log ]; then
            echo "Last 50 lines of config.log:"
            tail -n 50 config.log
          else
            echo "config.log not found. Contents of the directory:"
            ls -la
          fi
          cd ..
      - name: Setup libatomic
        run: |
          sudo mkdir -p /i486-linux-musl/lib
          sudo ln -s /home/runner/work/palera1n/palera1n/i486-linux-musl-cross/i486-linux-musl/lib/libatomic.la /i486-linux-musl/lib/libatomic.la
          sudo ln -s /home/runner/work/palera1n/palera1n/i486-linux-musl-cross/i486-linux-musl/lib/libatomic.a /i486-linux-musl/lib/libatomic.a

      - name: Check for libatomic
        run: |
          find ${{ env.DESTDIR }} -name "libatomic*"
          find /i486-linux-musl -name "libatomic*"

      - name: Check for existing libatomic
        run: |
          find /home/runner/work/palera1n/palera1n/i486-linux-musl-cross -name "libatomic*"

      - name: Create atomic_ops.c
        run: |
          cat << EOF > atomic_ops.c
          #include <stdint.h>
          
          int __atomic_fetch_add_4(volatile void *ptr, int val, int memorder) {
              int old = *(volatile int *)ptr;
              *(volatile int *)ptr = old + val;
              return old;
          }
          
          int __atomic_fetch_sub_4(volatile void *ptr, int val, int memorder) {
              int old = *(volatile int *)ptr;
              *(volatile int *)ptr = old - val;
              return old;
          }
          
          int __atomic_exchange_4(volatile void *ptr, int *val, int memorder) {
              int old = *(volatile int *)ptr;
              *(volatile int *)ptr = *val;
              return old;
          }
          EOF

      - name: Build libatomic
        run: |
          ${{ env.CROSS_COMPILE }}gcc -c -g -fPIC ${{ env.CFLAGS }} atomic_ops.c
          ${{ env.CROSS_COMPILE }}ar rcs libatomic.a atomic_ops.o
          cp libatomic.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/

      - name: Verify libatomic
        run: |
          ls -l ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libatomic.a
          ${{ env.CROSS_COMPILE }}nm ${{ env.DESTDIR }}${{ env.PREFIX }}/lib/libatomic.a

      - name: Create symbolic link for libatomic.so
        run: |
          sudo mkdir -p /i486-linux-musl/lib
          sudo ln -s /home/runner/work/palera1n/palera1n/i486-linux-musl-cross/i486-linux-musl/lib/libatomic.so /i486-linux-musl/lib/libatomic.so

      - name: Build libirecovery
        run: |
          cd libirecovery
          export PKG_CONFIG_PATH=${{ env.DESTDIR }}${{ env.PREFIX }}/lib/pkgconfig:$PKG_CONFIG_PATH
          export CFLAGS="$CFLAGS -I${{ env.DESTDIR }}${{ env.PREFIX }}/include/libusb-1.0 -I${{ env.DESTDIR }}${{ env.PREFIX }}/include -I${{ env.DESTDIR }}${{ env.PREFIX }}/include/ncurses"
          export LDFLAGS="$LDFLAGS -L${{ env.DESTDIR }}${{ env.PREFIX }}/lib -L/home/runner/work/palera1n/palera1n/i486-linux-musl-cross/i486-linux-musl/lib"
          export LIBS="/home/runner/work/palera1n/palera1n/i486-linux-musl-cross/i486-linux-musl/lib/libatomic.a -lncurses"
          export LIBUSB_1_0_CFLAGS="-I${{ env.DESTDIR }}${{ env.PREFIX }}/include/libusb-1.0"
          export LIBUSB_1_0_LIBS="-L${{ env.DESTDIR }}${{ env.PREFIX }}/lib -lusb-1.0"
          ./autogen.sh
          ./configure ${{ env.CONFIGURE_ARGS }} --enable-static --disable-shared
          make -j$(nproc) V=1 LDFLAGS="$LDFLAGS -static" LIBS="$LIBS"
          make install DESTDIR=${{ env.DESTDIR }}

      - name: List resources directory
        run: ls -l src/resources/

      - name: Build palera1n
        run: |
          # Check if sysroot directories exist
          if [ ! -d "${{ env.DESTDIR }}${{ env.PREFIX }}/include" ] || [ ! -d "${{ env.DESTDIR }}${{ env.PREFIX }}/lib" ]; then
            echo "Error: Sysroot directories don't exist. Dependencies may not have been built correctly."
            exit 1
          fi

          # Create dep_root directory
          mkdir -p dep_root

          # Copy include and lib directories
          cp -a ${{ env.DESTDIR }}${{ env.PREFIX }}/{include,lib} dep_root

          # Remove unnecessary files
          find dep_root -name '*.so' -delete
          find dep_root -name '*.la' -delete

          # Build palera1n
          CC="${{ env.CROSS_COMPILE }}gcc" make -j$(nproc) ROOTFUL=1

          # Copy the built binary
          cp src/palera1n palera1n-linux-x86

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: palera1n-linux-x86
          path: palera1n-linux-x86